from aiogram import Router, F, html
from aiogram.filters import CommandStart
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, Message, CallbackQuery
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from . import keyboards as kb  # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≥–¥–µ-—Ç–æ –≤ keyboards.py

router = Router()

# –°–ª–æ–≤–∞—Ä—å —Ç–µ—Å—Ç–æ–≤ –ø–æ –¥–Ω—è–º
tests = {
    1: "first_day",
    2: "second_day",
    3: "third_day"
}

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_universal_kb(completed_tests):
    next_test_index = completed_tests
    if next_test_index >= len(tests):
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–í—ã –ø—Ä–æ—à–ª–∏ –≤—Å–µ —Ç–µ—Å—Ç—ã!", callback_data="done")]
        ])

    next_test_key = tests[next_test_index]
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é", callback_data=f"{next_test_key}_test_call")],
        [InlineKeyboardButton(text="–ò–∑—É—á–∏—Ç—å —Ç–µ–æ—Ä–∏—é", callback_data="theory_call")]
    ])

# --- FSM –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ---
class Registration(StatesGroup):
    name = State()
    birth_year = State()

# --- FSM –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –¥–Ω—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ---
class SecondTest(StatesGroup):
    fast_count = State()
    remembered_words = State()
    stroop_time = State()

# --- –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã ---
@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    data = await state.get_data()
    if 'name' in data:
        await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        completed = data.get('completed_tests', 0)
        await message.answer(
            text="–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ –∏–ª–∏ –ø—Ä–æ–π—Ç–∏ –Ω–æ–≤—ã–µ —Ç–µ—Å—Ç—ã.",
            reply_markup=get_universal_kb(completed)
        )
        return

    await message.answer("–î–∞–≤–∞–π—Ç–µ –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è. –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")
    await state.set_state(Registration.name)

# --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏ ---
@router.message(Registration.name)
async def reg_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è")
    await state.set_state(Registration.birth_year)

# --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≥–æ–¥–∞ —Ä–æ–∂–¥–µ–Ω–∏—è ---
@router.message(Registration.birth_year)
async def reg_birth_year(message: Message, state: FSMContext):
    try:
        year = int(message.text)
        await state.update_data(birth_year=year, completed_tests=0)
        data = await state.get_data()

        await message.answer(
            f"–û—Ç–ª–∏—á–Ω–æ! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å.\n"
            f"–ò–º—è: {data['name']}\n"
            f"–ì–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è: {data['birth_year']}\n"
            f"–¢–µ—Å—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: 0\n"
            f"–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –∑–∞–¥–∞–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.",
            reply_markup=kb.entry_test  
        )
        await state.set_state(None)  # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è

    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è —á–∏—Å–ª–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä: 1990")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ ---
@router.callback_query(F.data == "entry_test_complete_call")
async def entry_test_done(query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    await state.update_data(completed_tests=1)
    await query.message.answer(
        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.",
        reply_markup=get_universal_kb(1)
    )

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ª—é–±–æ–≥–æ —Ç–µ—Å—Ç–∞ ---
@router.callback_query(F.data == "test_complete_call")
async def test_done(query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    completed = data.get('completed_tests', 0) + 1
    await state.update_data(completed_tests=completed)

    if completed >= len(tests):
        await query.message.answer("üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –≤—Å–µ —Ç–µ—Å—Ç—ã!")
    else:
        await query.message.answer(
            f"–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ç–µ—Å—Ç –Ω–æ–º–µ—Ä {completed-1}!",
            reply_markup=get_universal_kb(completed)
        )

# --- –¢–µ—Å—Ç –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è ---
@router.callback_query(F.data == "first_day_test_call")
async def first_day_test(query: CallbackQuery):
    await query.message.answer(
        "–°–µ–≥–æ–¥–Ω—è –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏. –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:\n"
        "1. –ù–∞ –æ–¥–Ω–æ–π —Ä—É–∫–µ –ø–æ–∫–∞–∂–∏—Ç–µ –¥–µ—Ç—Å–∫–∏–π –∂–µ—Å—Ç –ø—Ä–∏–º–∏—Ä–µ–Ω–∏—è (—Å–æ–∂–º–∏—Ç–µ –ø–∞–ª—å—Ü—ã –≤ –∫—É–ª–∞–∫, –∞ –º–∏–∑–∏–Ω–µ—Ü –≤—ã–ø—Ä—è–º–∏—Ç–µ).\n"
        "2. –ù–∞ –¥—Ä—É–≥–æ–π —Ä—É–∫–µ –ø–æ–∫–∞–∂–∏—Ç–µ –æ–¥–æ–±—Ä—è—é—â–∏–π –∂–µ—Å—Ç ‚Äî ¬´–∫–ª–∞—Å—Å¬ª.\n"
        "–í—ã–ø–æ–ª–Ω—è–π—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –ø–æ–æ—á–µ—Ä–µ–¥–Ω–æ –ø—Ä–∞–≤–æ–π –∏ –ª–µ–≤–æ–π —Ä—É–∫–æ–π."
    )
    await query.message.answer("–ù–∞–∂–º–∏—Ç–µ '–í—ã–ø–æ–ª–Ω–µ–Ω–æ', —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.", reply_markup=kb.complete)

# --- –¢–µ—Å—Ç –≤—Ç–æ—Ä–æ–≥–æ –¥–Ω—è —á–µ—Ä–µ–∑ FSM ---
@router.callback_query(F.data == "second_day_test_call")
async def second_day_test(query: CallbackQuery, state: FSMContext):
    current = await state.get_state()
    if current is None:
        await query.message.answer("–°–µ–≥–æ–¥–Ω—è –≤—Ç–æ—Ä–æ–π –¥–µ–Ω—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏. –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.")
        await query.message.answer(
            "1. –ó–∞—Å–µ–∫–∏—Ç–µ –≤—Ä–µ–º—è –∏ –ø–æ—Å—á–∏—Ç–∞–π—Ç–µ –≤—Å–ª—É—Ö –æ—Ç 1 –¥–æ 120 –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ. "
            "–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä: 63"
        )
        await state.set_state(SecondTest.fast_count)
    else:
        await query.message.answer("–í—ã —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ç–µ—Å—Ç–∞.")

@router.message(SecondTest.fast_count)
async def count_test(message: Message, state: FSMContext):
    try:
        time = int(message.text)
        await state.update_data(fast_count=time)
        await message.answer(
            "2. –ó–∞ 2 –º–∏–Ω—É—Ç—ã –∑–∞–ø–æ–º–Ω–∏—Ç–µ –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª—å—à–µ —Å–ª–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞. "
            "–ó–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–ø–æ–º–Ω–∏–ª–∏."
        )
        await state.set_state(SecondTest.remembered_words)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 65")

@router.message(SecondTest.remembered_words)
async def words_test(message: Message, state: FSMContext):
    words = message.text.split()
    await state.update_data(remembered_words=len(words))
    await message.answer(
        "3. –¢–µ—Å—Ç –°—Ç—Ä—É–ø–∞: –Ω–∞–∑—ã–≤–∞–π—Ç–µ —Ü–≤–µ—Ç —Å–ª–æ–≤, –Ω–µ —á–∏—Ç–∞—è –∏—Ö. –ó–∞—Å–µ–∫–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö."
    )
    await state.set_state(SecondTest.stroop_time)

@router.message(SecondTest.stroop_time)
async def stroop_test(message: Message, state: FSMContext):
    try:
        time = int(message.text)
        await state.update_data(stroop_time=time)
        data = await state.get_data()

        await message.answer(
            f"–í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞ –≤—Ç–æ—Ä–æ–π –¥–µ–Ω—å:\n"
            f"1. –°—á–µ—Ç: {data['fast_count']} —Å–µ–∫.\n"
            f"2. –ó–∞–ø–æ–º–Ω–∏–ª —Å–ª–æ–≤: {data['remembered_words']}\n"
            f"3. –¢–µ—Å—Ç –°—Ç—Ä—É–ø–∞: {data['stroop_time']} —Å–µ–∫."
        )
        await state.set_state(None)
        await message.answer("–ù–∞–∂–º–∏—Ç–µ '–í—ã–ø–æ–ª–Ω–µ–Ω–æ', —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.", reply_markup=kb.complete)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 34")

# --- –¢–µ–æ—Ä–∏—è ---
@router.callback_query(F.data == "theory_call")
async def theory_handler(query: CallbackQuery):
    await query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é —Ç–µ–º—É:", reply_markup=kb.theory)